{-# LANGUAGE MultiParamTypeClasses #-}

module Raft.Persistent where

import Protolude

import Raft.Log
import Raft.Types

-- | State saved to disk before performing actions generated by event handling.
--
-- TODO This value is passed to the TransitionM monad such that the currentTerm
-- and votedFor fields can be accessed; however, the entire log is not needed.
-- For most event handlers, only the last log entry is needed; unfortunately,
-- the AppendEntries handler needs yet another log entry: the log entry at the
-- index specified by 'prevLogIndex' field of 'AppendEntries'.
--
-- Soon, we should make another datatype that captures this necessity, reading
-- the last log entry and log entry at `prevLogIndex` if the event is an
-- 'AppendEntries' RPC message sent from a leader.
--
-- Perhaps, as a result, we should add the updating of the persistent state as
-- an action. Currently, there is logic in Raft.Follower that will edit its
-- current log state by removing the entries in its logs that conflict with the
-- logs in the AppendEntriesRPC, and then appends the logs contained in the RPC
-- to the log.
--
-- We need to think about how to best handle this issue; it is infeasible to
-- keep all log entries in memory.

data PersistentState v = PersistentState
  { psCurrentTerm :: Term
    -- ^ Last term server has seen
  , psVotedFor :: Maybe NodeId
    -- ^ candidate id that received vote in current term
  , psLog :: Log v
    -- ^ log entries; each entry contains command for state machine
  } deriving (Show)
